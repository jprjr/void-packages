# Template file for 'llvm'
pkgname=llvm
version=3.6.0
wrksrc="llvm-${version}.src"
revision=3
lib32disabled=yes
configure_args="--disable-expensive-checks --disable-debug-runtime
 --enable-bindings=none --enable-optimized --enable-shared --enable-libffi
 --enable-llvmc-dynamic --disable-assertions --enable-keep-symbols
 --enable-experimental-targets=R600"
short_desc="Low Level Virtual Machine"
maintainer="Juan RP <xtraeme@voidlinux.eu>"
homepage="http://www.llvm.org"
license="BSD"
distfiles="
 http://www.llvm.org/releases/${version}/llvm-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/lldb-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/cfe-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/compiler-rt-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/libcxx-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/libcxxabi-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/clang-tools-extra-${version}.src.tar.xz"

checksum="
 b39a69e501b49e8f73ff75c9ad72313681ee58d6f430bfad4d81846fe92eb9ce
 2b1ad1d42c4ea3fa2f9dd6db7c522d86e80891659b24dbb3d0d80386d8eaf0b2
 be0e69378119fe26f0f2f74cffe82b7c26da840c9733fe522ed3c1b66b11082d
 7f49fb79e5adcdce7dddaf973f1db130228dfb19e37a99a7f5365a6948b26b11
 299c1e82b0086a79c5c1aa1885ea3be3bbce6979aaa9b886409b14f9b387fbb7
 f78bcfdb8015272f28d70f5546a544b5bdae5d92862711e8ecb9b24387d994f5
 3aa949ba82913490a75697287d9ee8598c619fae0aa6bb8fddf0095ff51bc812"

# XXX Investigate ocaml bindings.
hostmakedepends="groff perl python zlib-devel libffi-devel swig"
makedepends="python-devel zlib-devel libffi-devel libedit-devel"

subpackages="clang clang-analyzer libllvm3.6 llvm-docs"
if [ -z "$CROSS_BUILD" ]; then
	# XXX fails to cross compile due to python
	subpackages+=" lldb lldb-devel"
fi

post_extract() {
	# patches
	cd ${XBPS_BUILDDIR}/llvm-${version}.src
	for i in ${FILESDIR}/patches/llvm/llvm-*.patch; do
		patch -sNp0 -i ${i}
	done

	cd ${XBPS_BUILDDIR}/compiler-rt-${version}.src
	for i in ${FILESDIR}/patches/compiler-rt/compiler-rt-*.patch; do
		patch -sNp0 -i ${i}
	done
	case "$XBPS_TARGET_MACHINE" in
		*-musl) patch -sNp0 -i "${FILESDIR}/patches/compiler-rt/compiler-rt_musl_001-disable-sanitizers.patch" ;;
	esac

	cd ${XBPS_BUILDDIR}/cfe-${version}.src
	for i in ${FILESDIR}/patches/cfe/cfe-*.patch; do
		patch -sNp0 -i ${i}
	done

	cd ${XBPS_BUILDDIR}/lldb-${version}.src
	for i in ${FILESDIR}/patches/lldb/*.patch; do
		patch -sNp0 -i ${i}
	done

	# Move clang files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/cfe-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/cfe-${version}.src ${wrksrc}/tools/clang
	fi
	# Move clang-tools-extra files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/cfe-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/cfe-${version}.src ${wrksrc}/tools/clang/tools/extra
	fi
	# Move lldb files into the llvm source.
	if [ -z "$CROSS_BUILD" -a -d ${XBPS_BUILDDIR}/lldb-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/lldb-${version}.src ${wrksrc}/tools/lldb
	fi
	# Move compiler-rt files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/compiler-rt-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/compiler-rt-${version}.src ${wrksrc}/projects/compiler-rt
	fi
	# Move libcxx files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/libcxx-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/libcxx-${version}.src ${wrksrc}/projects/libcxx
	fi
	# Move libcxxabi files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/libcxxabi-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/libcxxabi-${version}.src ${wrksrc}/projects/libcxxabi
	fi

	# make llvm-src a subdir of ${wrksrc}
    mkdir ${XBPS_BUILDDIR}/llvm
    mv ${wrksrc}/* ${XBPS_BUILDDIR}/llvm/
    mv ${XBPS_BUILDDIR}/llvm ${wrksrc}/
}


_build_stage1() {
	unset CC CXX CPP AR AS RANLIB CFLAGS CXXFLAGS CPPFLAGS LDFLAGS

	cd ${wrksrc}/llvm
	# Fix installation directories, ./configure doesn't seem to set them right
	sed -i -e 's:\$(PROJ_prefix)/etc/llvm:/etc/llvm:' \
		-e 's:\$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
		Makefile.config.in

	mkdir build1
	cd build1
	../configure --prefix=${wrksrc}/stage1 ${configure_args}
	make REQUIRES_RTTI=1 ${makejobs}
    make install
}

do_build() {
    _build_stage1
}

do_install() {
	cd ${wrksrc}/llvm/build1
    exit 1
	make DESTDIR=${DESTDIR} install

	# Fix permissions of static libs
	chmod -x ${DESTDIR}/usr/lib/*.a

	# Get rid of example Hello transformation
	rm ${DESTDIR}/usr/lib/*LLVMHello.*

	# Required for multilib.
	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		for _header in config llvm-config; do
			mv ${DESTDIR}/usr/include/llvm/Config/${_header}{,-64}.h
			vinstall ${FILESDIR}/llvm-Config-${_header}.h 644 \
				usr/include/llvm/Config ${_header}.h
		done
	fi

	# Remove llvm-config-host in cross builds.
	if [ "$CROSS_BUILD" ]; then
		rm -f ${DESTDIR}/usr/bin/llvm-config-host
	fi
}

clang-analyzer_package() {
	noarch=yes
	pycompile_dirs="usr/lib/clang-analyzer"
	depends="clang-${version}_${revision} python"
	short_desc+=" - A source code analysis framework"
	homepage="http://clang-analyzer.llvm.org/"
	pkg_install() {
		vmkdir usr/bin
		vmkdir usr/lib/clang-analyzer

		for f in build view; do
			cp -r ${wrksrc}/tools/clang/tools/scan-${f} ${PKGDESTDIR}/usr/lib/clang-analyzer
			cd ${PKGDESTDIR}/usr/bin
			ln -s ../lib/${pkgname}/scan-${f}/scan-${f} scan-${f}
		done

		ln -sf /usr/bin/clang ${PKGDESTDIR}/usr/lib/${pkgname}/scan-build
	}
}
clang_package() {
	lib32disabled=yes
	depends="libstdc++-devel binutils gcc"
	short_desc+=" - C language family frontend"
	homepage="http://clang.llvm.org/"
	pkg_install() {
		vmove usr/include/clang
		vmove "usr/bin/*clang*"
		vmove usr/bin/c-index-test
		vmove usr/lib/clang
		vmove "usr/lib/libclang*"
		vmove "usr/share/man/man1/*clang*"
	}
}
lldb_package() {
	lib32disabled=yes
	short_desc+=" - LLDB debugger"
	homepage="http://lldb.llvm.org/"
	pkg_install() {
		vmove "usr/bin/*lldb*"
		vmove "usr/lib/liblldb*so"
		vman tools/lldb/docs/lldb.1
		vmove "/usr/lib/python*"
	}
}
lldb-devel_package() {
	depends="lldb>=${version}_${revision}"
	short_desc+=" - LLDB debugger - development files"
	pkg_install() {
		vmove usr/include/lldb
		vmove "usr/lib/liblldb*.a"
	}
}
llvm-docs_package() {
	noarch=yes
	short_desc+=" - documentation files"
	pkg_install() {
		vmove usr/share/doc
	}
}
libllvm3.6_package() {
	short_desc+=" - runtime library"
	pkg_install() {
		vmove usr/lib/libLLVM-${version%.*}.so
		vmove usr/lib/libLLVM-${version}.so
	}
}

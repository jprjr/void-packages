# Template file for 'llvm'
pkgname=llvm
version=3.6.2
revision=2
wrksrc="llvm-${version}.src"
lib32disabled=yes
short_desc="Low Level Virtual Machine"
maintainer="Juan RP <xtraeme@voidlinux.eu>"
homepage="http://www.llvm.org"
license="BSD"
distfiles="
 http://www.llvm.org/releases/${version}/llvm-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/cfe-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/compiler-rt-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/lld-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/libcxx-${version}.src.tar.xz
 http://www.llvm.org/releases/${version}/libcxxabi-${version}.src.tar.xz"
checksum="
 f60dc158bfda6822de167e87275848969f0558b3134892ff54fced87e4667b94
 ae9180466a23acb426d12444d866b266ff2289b266064d362462e44f8d4699f3
 0f2ff37d80a64575fecd8cf0d5c50f7ac1f837ddf700d1855412bb7547431d87
 43f553c115563600577764262f1f2fac3740f0c639750f81e125963c90030b33
 52f3d452f48209c9df1792158fdbd7f3e98ed9bca8ebb51fcd524f67437c8b81
 6fb48ce5a514686b9b75e73e59869f782ed374a86d71be8423372e4b3329b09b"

# XXX Investigate ocaml bindings.
hostmakedepends="cmake groff perl python zlib-devel libffi-devel swig"
makedepends="python-devel zlib-devel libffi-devel libedit-devel"

subpackages="clang clang-analyzer libllvm3.6 llvm-docs"
subpackages+=" libc++ libc++-devel"
subpackages+=" libc++abi libc++abi-devel"
if [ -n "$CROSS_BUILD" ]; then
	hostmakedepends+=" clang llvm-devel"
fi

post_extract() {
	# projects/tools with "all" patches:
	# llvm cfe libcxx

	# projects/tools with musl-only patches:
	# compiler-rt

	# llvm "all" patches
	cd ${XBPS_BUILDDIR}/llvm-${version}.src
	for i in ${FILESDIR}/patches/llvm/all-*.patch; do
		patch -sNp0 -i ${i}
	done

	# cfe "all" patches
	cd ${XBPS_BUILDDIR}/cfe-${version}.src
	for i in ${FILESDIR}/patches/cfe/all-*.patch; do
		patch -sNp0 -i ${i}
	done

	# libcxx "all" patches
	cd ${XBPS_BUILDDIR}/libcxx-${version}.src
	for i in ${FILESDIR}/patches/libcxx/all-*.patch; do
		patch -sNp0 -i ${i}
	done

	case "$XBPS_TARGET_MACHINE" in
		*-musl) 
			# TODO Come up with patches that don't disable most
			# of compiler-rt
			cd ${XBPS_BUILDDIR}/compiler-rt-${version}.src
			for i in ${FILESDIR}/patches/compiler-rt/musl-*.patch; do
				patch -sNp0 -i ${i}
			done
			;;
	esac

	# Move clang files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/cfe-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/cfe-${version}.src ${wrksrc}/tools/clang
	fi
	# Move clang files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/lld-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/lld-${version}.src ${wrksrc}/tools/lld
	fi
	# Move compiler-rt files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/compiler-rt-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/compiler-rt-${version}.src ${wrksrc}/projects/compiler-rt
	fi
	# Move libcxx files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/libcxx-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/libcxx-${version}.src ${wrksrc}/projects/libcxx
	fi
	# Move libcxxabi files into the llvm source.
	if [ -d ${XBPS_BUILDDIR}/libcxxabi-${version}.src ]; then
		mv ${XBPS_BUILDDIR}/libcxxabi-${version}.src ${wrksrc}/projects/libcxxabi
	fi

	# Move everything into a subdirectory of wrksrc
	mv "${wrksrc}" "${XBPS_BUILDDIR}/llvm"
	mkdir "${wrksrc}"
	mv "${XBPS_BUILDDIR}/llvm" "${wrksrc}/llvm"
}

_get_host_triplet() {
	grep XBPS_TRIPLET "${XBPS_COMMONDIR}"/build-profiles/"$1".sh | sed 's/XBPS_TRIPLET=//; s/"//g'
}

_bootstrap_clang() {
	[ -e ${wrksrc}/.bootstrap_done ] && return 0
	mkdir ${wrksrc}/build-bootstrap
	mkdir ${wrksrc}/install-bootstrap

	HOST_TRIPLET=$(_get_host_triplet "${XBPS_MACHINE}")

	cd ${wrksrc}/build-bootstrap
	cmake ../llvm \
		-DLLVM_DEFAULT_TARGET_TRIPLE="${HOST_TRIPLET}" \
		-DBUILD_SHARED_LIBS=on \
		-DLLVM_TARGETS_TO_BUILD=host \
		-DLLVM_INCLUDE_TOOLS=on \
		-DLLVM_EXTERNAL_LIBCXX_BUILD=off \
		-DLLVM_EXTERNAL_LIBCXXABI_BUILD=off \
		-DLLVM_EXTERNAL_COMPILER_RT_BUILD=off \
		-DLLVM_REQUIRES_RTTI=on \
		-DLLVM_ENABLE_FFI=off \
		-DCMAKE_INSTALL_PREFIX=${wrksrc}/install-bootstrap \
		-DCMAKE_BUILD_TYPE=Release
	make ${makejobs}
	make install

	rm -rf ${wrksrc}/build-bootstrap
	touch ${wrksrc}/.bootstrap_done
}


do_configure() {
	unset CC CXX CPP AR AS RANLIB CFLAGS CXXFLAGS CPPFLAGS LDFLAGS

	# Fix installation directories, ./configure doesn't seem to set them right
	sed -i -e 's:\$(PROJ_prefix)/etc/llvm:/etc/llvm:' \
		-e 's:\$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
		"${wrksrc}/llvm/Makefile.config.in"

	TARGET_TRIPLET=$(_get_host_triplet "${XBPS_TARGET_MACHINE}")
	_MY_CC=""
	_MY_CXX=""
	if [ -z "$CROSS_BUILD" ]; then
		_bootstrap_clang
		_MY_CC="${wrksrc}/install-bootstrap/bin/clang"
		_MY_CXX="${wrksrc}/install-bootstrap/bin/clang++"
		_MY_LD="${wrksrc}/install-bootstrap/bin/lld"
	else
		_MY_CC="/usr/bin/clang"
		_MY_CXX="/usr/bin/clang++"
		_MY_LD="/usr/bin/lld"
	fi

	mkdir "${wrksrc}/build"
	cd "${wrksrc}/build"
	CC="${_MY_CC}" \
	CXX="${_MY_CXX}" \
	LD="${_MY_LD}" \
	cmake ../llvm  \
		-DLLVM_HOST_TRIPLE="${TARGET_TRIPLET}" \
		-DLLVM_DEFAULT_TARGET_TRIPLE="${TARGET_TRIPLET}" \
		-DBUILD_SHARED_LIBS=on \
		-DLLVM_TARGETS_TO_BUILD=all \
		-DLLVM_INCLUDE_TOOLS=on \
		-DLLVM_EXTERNAL_LIBCXX_BUILD=on \
		-DLLVM_EXTERNAL_LIBCXXABI_BUILD=on \
		-DLLVM_EXTERNAL_COMPILER_RT_BUILD=on \
		-DLLVM_REQUIRES_RTTI=on \
		-DLLVM_ENABLE_FFI=on \
		-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=R600 \
		-DCMAKE_INSTALL_PREFIX=/usr \
		-DCMAKE_BUILD_TYPE=Release
}

do_build() {
	unset CC CXX CPP AR AS RANLIB CFLAGS CXXFLAGS CPPFLAGS LDFLAGS
	cd build
	make REQUIRES_RTTI=1 ${makejobs}
}

do_install() {
	cd build
	make DESTDIR=${DESTDIR} install

	# Fix permissions of static libs
	chmod -x ${DESTDIR}/usr/lib/*.a

	# Get rid of example Hello transformation
	rm ${DESTDIR}/usr/lib/*LLVMHello.*

	# Required for multilib.
	if [ "$XBPS_TARGET_MACHINE" = "x86_64" ]; then
		for _header in config llvm-config; do
			mv ${DESTDIR}/usr/include/llvm/Config/${_header}{,-64}.h
			vinstall ${FILESDIR}/llvm-Config-${_header}.h 644 \
				usr/include/llvm/Config ${_header}.h
		done
	fi

	# Remove llvm-config-host in cross builds.
	if [ "$CROSS_BUILD" ]; then
		rm -f ${DESTDIR}/usr/bin/llvm-config-host
	fi
}

clang-analyzer_package() {
	noarch=yes
	pycompile_dirs="usr/lib/clang-analyzer"
	depends="clang-${version}_${revision} python"
	short_desc+=" - A source code analysis framework"
	homepage="http://clang-analyzer.llvm.org/"
	pkg_install() {
		vmkdir usr/bin
		vmkdir usr/lib/clang-analyzer

		for f in build view; do
			cp -r ${wrksrc}/tools/clang/tools/scan-${f} ${PKGDESTDIR}/usr/lib/clang-analyzer
			cd ${PKGDESTDIR}/usr/bin
			ln -s ../lib/${pkgname}/scan-${f}/scan-${f} scan-${f}
		done

		ln -sf /usr/bin/clang ${PKGDESTDIR}/usr/lib/${pkgname}/scan-build
	}
}
clang_package() {
	lib32disabled=yes
	depends="libstdc++-devel binutils gcc"
	short_desc+=" - C language family frontend"
	homepage="http://clang.llvm.org/"
	pkg_install() {
		vmove usr/include/clang
		vmove "usr/bin/*clang*"
		vmove usr/bin/c-index-test
		vmove usr/lib/clang
		vmove "usr/lib/libclang*"
		vmove "usr/share/man/man1/*clang*"
	}
}
libc++_package() {
	lib32disabled=yes
	short_desc+=" - C++ Standard Library"
	homepage="http://libcxx.llvm.org/"
	pkg_install() {
		vmove "usr/lib/libc++*so"
	}
}
libc++-devel_package() {
	lib32disabled=yes
	short_desc+=" - C++ Standard Library - development files"
	homepage="http://libcxx.llvm.org/"
	pkg_install() {
		vmove usr/include/c++/v1
		vmove "usr/lib/libc++*.a"
	}
}
libc++abi_package() {
	lib32disabled=yes
	short_desc+=" - C++ Standard Library Support"
	homepage="http://libcxxabi.llvm.org/"
	pkg_install() {
		vmove "usr/lib/libc++abi*so"
	}
}
libc++abi-devel_package() {
	lib32disabled=yes
	short_desc+=" - C++ Library Library Support - development files"
	homepage="http://libcxxabi.llvm.org/"
	pkg_install() {
		vmove usr/include/cxxabi
		vmove "usr/lib/libc++abi*.a"
	}
}
llvm-docs_package() {
	noarch=yes
	short_desc+=" - documentation files"
	pkg_install() {
		vmove usr/share/doc
	}
}
libllvm3.6_package() {
	short_desc+=" - runtime library"
	pkg_install() {
		vmove usr/lib/libLLVM-${version%.*}.so
		vmove usr/lib/libLLVM-${version}.so
	}
}
